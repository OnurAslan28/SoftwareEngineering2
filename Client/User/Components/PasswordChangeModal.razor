@using Microsoft.AspNetCore.Components.Forms
@using Shared.User.Models
@using StudyMate.Shared.Models
@using StudyMate.Client.User.Services
@using StudyMate.Client.User.Components
@inject IUserApi Api

<div class="modal" tabindex="-1" role="dialog" style="display:block; background-color: rgba(10,10,10,.8);"
	id="taskModal">
	<div class="modal-dialog shadow-lg bg-white rounded" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Change your password</h5>
				<button type="button" class="btn-close" aria-label="Close" @onclick="ModalCancel"></button>
			</div>
			<div class="modal-body">
				@if (EnteredWrongPassword)
				{
					<div class="alert alert-danger" role="alert">
						The entered password was incorrect!
					</div>
				}
				<EditForm Model="ChangePassword" OnValidSubmit="OnValidSubmit">
					<DataAnnotationsValidator />

					<div class="form-group">
						<label for="current-password">Current Passwort:</label>
						<InputText class="form-control" id="current-password" type="password" autocomplete="false"
							@bind-Value="@ChangePassword.CurrentPassword" />
					</div>

					<div class="form-group">
						<label for="new-password">New Passwort:</label>
						<InputText class="form-control" id="new-password" type="password" autocomplete="false"
							@bind-Value="@ChangePassword.NewPassword" />
						<div>
							<ValidationMessage TValue="string" For="() => ChangePassword.NewPassword" />
						</div>
					</div>

					<div class="form-group">
						<label for="confirm-new-password">Repeat:</label>
						<InputText class="form-control" id="confirm-new-password" type="password" autocomplete="false"
							@bind-Value="@ChangePassword.ConfirmNewPassword" />
						<div>
							<ValidationMessage TValue="string" For="() => ChangePassword.ConfirmNewPassword" />
						</div>
					</div>
					<div class="modal-footer">
						<button type="submit" class="my-btn-primary">Submit</button>
						<button type="button" class="my-btn-secondary" @onclick="ModalCancel">Cancel</button>
					</div>
				</EditForm>
			</div>
		</div>
	</div>
</div>


@code {
	[Parameter]
	public string Username { get; set; } = null!;

	[Parameter]
	public EventCallback<bool> OnClose { get; set; }

	public PasswordChangeRequest ChangePassword { get; set; } = new();
	public bool EnteredWrongPassword { get; set; }

	private async Task OnValidSubmit()
	{
		try
		{
			var request = new PasswordUpdateRequest
			{
				Username = Username,
				CurrentPassword = ChangePassword.CurrentPassword,
				NewPassword = ChangePassword.NewPassword
			};
			var updatePasswordSuccess = await Api.UpdatePasswordSuccess(request);
			if (updatePasswordSuccess == true)
			{
				await OnClose.InvokeAsync(true);
			}
			else
			{
				EnteredWrongPassword = true;
				ClearInputFields();
			}
		}
		catch (OperationCanceledException) { }
		catch (Exception ex)
		{
			Console.WriteLine($"Das Speichern hat nicht funktioniert! Fehler: {ex}");
		}
	}

	private void ClearInputFields()
	{
		ChangePassword.CurrentPassword = string.Empty;
		ChangePassword.NewPassword = string.Empty;
		ChangePassword.ConfirmNewPassword = string.Empty;
	}


	private Task ModalCancel()
	{
		return OnClose.InvokeAsync(false);
	}
}